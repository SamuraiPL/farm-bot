import discord
from discord import ui, ButtonStyle, app_commands
import time
import asyncio
import sqlite3
import os

# --- Discord ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ ---
custom_cooldowns = {
    "–°—Ö–µ–º—ã": 14400,
    "–®–≤–µ–π–∫–∞": 14400,
    "–í–æ–ª–æ–Ω—Ç—ë—Ä–∫–∞": 10800,
    "–°–∫–æ–ª—å–∑–∫–∞—è": 10800,
    "–ü–∏—Ç–æ–º–µ—Ü": 900,
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": 7200,
    "–†–µ–ª–æ–≥": 900,

    # –ó–∞–¥–∞–Ω–∏—è –∫–ª—É–±–∞
    "Moto": 7200,
    "Car Meet": 7200,
    "Rednecks": 7200,
    "The Epsilon Program": 7200,
    "Merryweather": 7200,

    # –û–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞
    "–û–ø–ª–∞—Ç–∞ –Ω–∞ 6 –¥–Ω–µ–π": 5 * 86400,
    "–û–ø–ª–∞—Ç–∞ –Ω–∞ 29 –¥–Ω–µ–π": 29 * 86400
}

COOLDOWN_DEFAULT = 1800  # 30 –º–∏–Ω—É—Ç

def get_cooldown(action_name):
    return custom_cooldowns.get(action_name, COOLDOWN_DEFAULT)

# --- SQLite ---
conn = sqlite3.connect('farm_bot.db', check_same_thread=False)
cursor = conn.cursor()

def init_db():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_timers (
            user_id INTEGER,
            action TEXT,
            last_used REAL,
            PRIMARY KEY (user_id, action)
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            event_type TEXT,
            user_id INTEGER,
            action_name TEXT,
            message TEXT
        )
    ''')
    conn.commit()

def load_data_from_db():
    cursor.execute("SELECT user_id, action, last_used FROM user_timers")
    for row in cursor.fetchall():
        user_id, action, timestamp = row
        if user_id not in last_used:
            last_used[user_id] = {}
        last_used[user_id][action] = timestamp

def save_timer_to_db(user_id, action_name):
    cursor.execute('''
        INSERT OR REPLACE INTO user_timers (user_id, action, last_used)
        VALUES (?, ?, ?)
    ''', (user_id, action_name, time.time()))
    conn.commit()
    log_event("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", user_id, action_name, "–ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
last_used = {}  # user_id -> {action -> last_used_time}
pending_notifications = []  # {user_id, action_name, end_time, message}

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log_event(event_type: str, user_id: int, action_name: str = None, message: str = None):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    cursor.execute('''
        INSERT INTO logs (timestamp, event_type, user_id, action_name, message)
        VALUES (?, ?, ?, ?, ?)
    ''', (timestamp, event_type, user_id, action_name, message))
    conn.commit()
    print(f"[{event_type}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –¥–µ–π—Å—Ç–≤–∏–µ: {action_name or 'N/A'} ‚Üí {message or ''}")

# --- –ú–µ–Ω—é —Ñ–∞—Ä–º–∞ ---
class FarmMenu(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def handle_button_click(self, interaction: discord.Interaction, action_name: str):
        user_id = interaction.user.id

        if not is_action_available(user_id, action_name):
            await self.show_countdown(interaction, action_name)
            return

        last_used.setdefault(user_id, {})[action_name] = time.time()
        save_timer_to_db(user_id, action_name)

        pending_notifications.append({
            "user_id": user_id,
            "action_name": action_name,
            "end_time": time.time() + get_cooldown(action_name),
            "message": None
        })

        await interaction.response.send_message(f"‚úÖ –í—ã –Ω–∞—á–∞–ª–∏: **{action_name}**", ephemeral=True)

    async def show_countdown(self, interaction: discord.Interaction, action_name: str):
        user_id = interaction.user.id
        cooldown = get_cooldown(action_name)
        end_time = last_used.get(user_id, {}).get(action_name, 0) + cooldown
        remaining = max(0, int(end_time - time.time()))

        embed = discord.Embed(
            title=f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {action_name}",
            color=discord.Color.orange()
        )

        await interaction.response.send_message(embed=embed, ephemeral=True)

        while remaining > 0:
            hours, remainder = divmod(remaining, 3600)
            mins, secs = divmod(remainder, 60)
            timer_text = f"{hours} —á {mins} –º–∏–Ω {secs} —Å–µ–∫"

            bar_length = 20
            progress = 1 - (remaining / cooldown)
            filled = int(bar_length * progress)
            bar = 'üü©' * filled + 'üü•' * (bar_length - filled)

            embed.description = f"```\n{bar}\n```\n–û—Å—Ç–∞–ª–æ—Å—å: **{timer_text}**"
            try:
                await interaction.edit_original_response(embed=embed)
            except discord.NotFound:
                return

            await asyncio.sleep(10)
            remaining = max(0, int(end_time - time.time()))

        embed.title = "‚úÖ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ!"
        embed.description = f"–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: **{action_name}**"
        embed.color = discord.Color.green()
        await interaction.edit_original_response(embed=embed)

    @ui.button(label="–°—Ö–µ–º—ã", style=ButtonStyle.primary, emoji="üìò")
    async def schemes(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–°—Ö–µ–º—ã")

    @ui.button(label="–®–≤–µ–π–∫–∞", style=ButtonStyle.primary, emoji="üßµ")
    async def sewing(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–®–≤–µ–π–∫–∞")

    @ui.button(label="–í–æ–ª–æ–Ω—Ç—ë—Ä–∫–∞", style=ButtonStyle.success, emoji="‚õëÔ∏è")
    async def volunteer(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–í–æ–ª–æ–Ω—Ç—ë—Ä–∫–∞")

    @ui.button(label="–°–∫–æ–ª—å–∑–∫–∞—è", style=ButtonStyle.danger, emoji="üõ¢Ô∏è")
    async def slippery(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–°–∫–æ–ª—å–∑–∫–∞—è")

    @ui.button(label="–ü–∏—Ç–æ–º–µ—Ü", style=ButtonStyle.secondary, emoji="üêæ")
    async def pet(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–ü–∏—Ç–æ–º–µ—Ü")

    @ui.button(label="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", style=ButtonStyle.primary, emoji="üè¢")
    async def organization(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")

    @ui.button(label="–†–µ–ª–æ–≥", style=ButtonStyle.danger, emoji="üîÑ")
    async def relog(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_button_click(interaction, "–†–µ–ª–æ–≥")

    @ui.button(label="–ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞", style=ButtonStyle.primary, emoji="üéØ")
    async def club_task_button(self, interaction: discord.Interaction, button: ui.Button):
        view = ClubTaskMenu(farm_view=self)
        embed = discord.Embed(
            title="üéØ –ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
            color=discord.Color.gold()
        )
        await interaction.response.edit_message(embed=embed, view=view)

    @ui.button(label="–û–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞", style=ButtonStyle.success, emoji="üí∞")
    async def property_payment_button(self, interaction: discord.Interaction, button: ui.Button):
        view = PaymentMenu(farm_view=self)
        embed = discord.Embed(
            title="üí∞ –û–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:",
            color=discord.Color.blue()
        )
        await interaction.response.edit_message(embed=embed, view=view)

    @ui.button(label="–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º–µ—Ä", style=ButtonStyle.secondary, emoji="‚è±Ô∏è")
    async def custom_timer_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(CustomTimerModal())

    @ui.button(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–π–º–µ—Ä—ã", style=ButtonStyle.secondary, emoji="‚è±Ô∏è")
    async def show_timers_button(self, interaction: discord.Interaction, button: ui.Button):
        await self.show_current_timers(interaction)

    async def show_current_timers(self, interaction: discord.Interaction):
        user_id = interaction.user.id

        if user_id not in last_used or not last_used[user_id]:
            await interaction.response.send_message("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.", ephemeral=True)
            return

        embed = discord.Embed(
            title="‚è±Ô∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ùå —Ä—è–¥–æ–º —Å –¥–µ–π—Å—Ç–≤–∏–µ–º, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–≥–æ",
            color=discord.Color.orange()
        )

        view = TimerMenu(farm_view=self)

        for action_name, timestamp in last_used[user_id].items():
            cooldown = get_cooldown(action_name)
            remaining = max(0, int(timestamp + cooldown - time.time()))
            if remaining > 0:
                hours, remainder = divmod(remaining, 3600)
                mins, secs = divmod(remainder, 60)
                timer_text = f"{hours} —á {mins} –º–∏–Ω {secs} —Å–µ–∫"
                embed.add_field(
                    name=f"‚è≥ {action_name}",
                    value=f"–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: `{timer_text}`",
                    inline=False
                )
                view.add_delete_button(action_name)

        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


# --- CustomTimerModal ---
class CustomTimerModal(ui.Modal, title="‚è∞ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º–µ—Ä"):
    days = ui.TextInput(label="–î–Ω–∏", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2", required=False, default="0")
    hours = ui.TextInput(label="–ß–∞—Å—ã", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 5", required=False, default="0")
    minutes = ui.TextInput(label="–ú–∏–Ω—É—Ç—ã", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 30", required=False, default="0")

    def __init__(self):
        super().__init__()
        self.view = None

    async def on_submit(self, interaction: discord.Interaction):
        try:
            d = int(self.days.value or 0)
            h = int(self.hours.value or 0)
            m = int(self.minutes.value or 0)

            total_seconds = d * 86400 + h * 3600 + m * 60

            if total_seconds <= 0:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –Ω—É–ª—è.", ephemeral=True)
                return

            action_name = f"–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º–µ—Ä ({d} –¥–Ω {h} —á {m} –º–∏–Ω)"
            user_id = interaction.user.id

            last_used.setdefault(user_id, {})[action_name] = time.time()
            save_timer_to_db(user_id, action_name)

            pending_notifications.append({
                "user_id": user_id,
                "action_name": action_name,
                "end_time": time.time() + total_seconds
            })

            log_event("–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º–µ—Ä", user_id, action_name, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")

            embed = discord.Embed(
                title=f"‚è±Ô∏è {action_name}",
                description=f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞: {d} –¥–Ω–µ–π, {h} —á–∞—Å–æ–≤, {m} –º–∏–Ω—É—Ç",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

        except ValueError:
            await interaction.response.send_message("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –ø–æ–ª—è—Ö", ephemeral=True)


# --- –¢–∞–π–º–µ—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π ‚ùå ---
class TimerMenu(ui.View):
    def __init__(self, farm_view):
        super().__init__(timeout=None)
        self.farm_view = farm_view

    def add_delete_button(self, action_name: str):
        button = ui.Button(
            label=f"‚ùå {action_name}",
            style=ButtonStyle.danger,
            custom_id=f"delete_{action_name}"
        )
        async def delete_callback(interaction: discord.Interaction):
            user_id = interaction.user.id
            if user_id in last_used and action_name in last_used[user_id]:
                del last_used[user_id][action_name]
                cursor.execute("DELETE FROM user_timers WHERE user_id=? AND action=?", (user_id, action_name))
                conn.commit()
                log_event("–¢–∞–π–º–µ—Ä —É–¥–∞–ª—ë–Ω", user_id, action_name, "–¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á—ë–Ω –≤—Ä—É—á–Ω—É—é")
                await interaction.response.send_message(f"‚úÖ –¢–∞–π–º–µ—Ä `{action_name}` –æ—Ç–∫–ª—é—á—ë–Ω.", ephemeral=True)
                await self.update_timer_embed(interaction)
            else:
                await interaction.response.send_message("‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", ephemeral=True)
        button.callback = delete_callback
        self.add_item(button)

    @ui.button(label="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", style=ButtonStyle.secondary, emoji="‚¨ÖÔ∏è")
    async def back_button(self, interaction: discord.Interaction, button: ui.Button):
        embed = discord.Embed(
            title="üåæ –§–∞—Ä–º GTA V RP",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞—Ä–º–∞:",
            color=discord.Color.green()
        )
        view = self.farm_view
        await interaction.response.edit_message(embed=embed, view=view)

    async def update_timer_embed(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        current_time = time.time()

        embed = discord.Embed(
            title="‚è±Ô∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ùå —Ä—è–¥–æ–º —Å –¥–µ–π—Å—Ç–≤–∏–µ–º, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–≥–æ",
            color=discord.Color.orange()
        )

        has_active = False

        for action_name, timestamp in last_used.get(user_id, {}).items():
            cooldown = get_cooldown(action_name)
            remaining = max(0, int(timestamp + cooldown - current_time))

            if remaining > 0:
                hours, remainder = divmod(remaining, 3600)
                mins, secs = divmod(remainder, 60)
                timer_text = f"{hours} —á {mins} –º–∏–Ω {secs} —Å–µ–∫"
                embed.add_field(
                    name=f"‚è≥ {action_name}",
                    value=f"–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: `{timer_text}`",
                    inline=False
                )
                has_active = True

        if not has_active:
            embed.title = "‚úÖ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã"
            embed.description = ""
            embed.add_field(name="üéâ", value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
            embed.color = discord.Color.green()

        new_view = TimerMenu(farm_view=self.farm_view)
        for act, ts in last_used.get(user_id, {}).items():
            cooldown = get_cooldown(act)
            if ts + cooldown > time.time():
                new_view.add_delete_button(act)

        try:
            await interaction.edit_original_response(embed=embed, view=new_view)
        except discord.NotFound:
            return

        while True:
            if not self.is_message_valid(interaction):
                return

            updated_embed = discord.Embed(
                title="‚è±Ô∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã",
                description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ùå —Ä—è–¥–æ–º —Å –¥–µ–π—Å—Ç–≤–∏–µ–º, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–≥–æ",
                color=discord.Color.orange()
            )

            for action_name, timestamp in list(last_used.get(user_id, {}).items()):
                cooldown = get_cooldown(action_name)
                remaining = max(0, int(timestamp + cooldown - time.time()))

                if remaining > 0:
                    hours, remainder = divmod(remaining, 3600)
                    mins, secs = divmod(remainder, 60)
                    timer_text = f"{hours} —á {mins} –º–∏–Ω {secs} —Å–µ–∫"
                    updated_embed.add_field(
                        name=f"‚è≥ {action_name}",
                        value=f"–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: `{timer_text}`",
                        inline=False
                    )

            try:
                await interaction.edit_original_response(embed=updated_embed, view=new_view)
            except discord.NotFound:
                return

            await asyncio.sleep(1)

    def is_message_valid(self, interaction: discord.Interaction):
        try:
            message = interaction.message or interaction.original_response()
            return message is not None
        except Exception as e:
            return False


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π üóëÔ∏è ---
class NotificationView(ui.View):
    def __init__(self, user_id, action_name):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.action_name = action_name

    @ui.button(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", style=ButtonStyle.danger)
    async def delete_notification(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.message.delete()

        for notify in pending_notifications:
            if notify.get("user_id") == self.user_id and notify.get("action_name") == self.action_name:
                pending_notifications.remove(notify)
                break

        print(f"[LOG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ `{self.action_name}` —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {self.user_id}")
        print(f"[LOG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ –∏–≥—Ä–æ–∫–æ–º")


# --- –ü–æ–¥–º–µ–Ω—é "–ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞" ---
class ClubTaskMenu(ui.View):
    def __init__(self, farm_view):
        super().__init__(timeout=None)
        self.farm_view = farm_view

    async def handle_task_click(self, interaction: discord.Interaction, task_name: str):
        user_id = interaction.user.id

        if not is_action_available(user_id, task_name):
            remaining = get_remaining_time(user_id, task_name)
            hours, remainder = divmod(remaining, 3600)
            mins, secs = divmod(remainder, 60)
            await interaction.response.send_message(
                f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ \"{task_name}\" –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hours} —á {mins} –º–∏–Ω.",
                ephemeral=True
            )
            return

        last_used.setdefault(user_id, {})[task_name] = time.time()
        save_timer_to_db(user_id, task_name)

        pending_notifications.append({
            "user_id": user_id,
            "action_name": task_name,
            "end_time": time.time() + 7200  # 2 —á–∞—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –∫–ª—É–±–∞
        })
        log_event("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", user_id, task_name, "–ù–∞—á–∞—Ç–æ")
        await interaction.response.send_message(f"‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ: **{task_name}**", ephemeral=True)

    @ui.button(label="Moto", style=ButtonStyle.primary, emoji="üèçÔ∏è")
    async def moto(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_task_click(interaction, "Moto")

    @ui.button(label="Car Meet", style=ButtonStyle.primary, emoji="üöó")
    async def car_meet(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_task_click(interaction, "Car Meet")

    @ui.button(label="Rednecks", style=ButtonStyle.primary, emoji="ü§†")
    async def rednecks(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_task_click(interaction, "Rednecks")

    @ui.button(label="The Epsilon Program", style=ButtonStyle.success, emoji="üåÄ")
    async def epsilon(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_task_click(interaction, "The Epsilon Program")

    @ui.button(label="Merryweather", style=ButtonStyle.danger, emoji="üëÆ‚Äç‚ôÇÔ∏è")
    async def merryweather(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_task_click(interaction, "Merryweather")

    @ui.button(label="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", style=ButtonStyle.secondary, emoji="‚¨ÖÔ∏è")
    async def back_to_farm(self, interaction: discord.Interaction, button: ui.Button):
        embed = discord.Embed(
            title="üåæ –§–∞—Ä–º GTA V RP",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞—Ä–º–∞:",
            color=discord.Color.green()
        )
        view = self.farm_view
        await interaction.response.edit_message(embed=embed, view=view)


# --- –ü–æ–¥–º–µ–Ω—é "–û–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞" ---
class PaymentMenu(ui.View):
    def __init__(self, farm_view):
        super().__init__(timeout=None)
        self.farm_view = farm_view

    async def handle_payment_click(self, interaction: discord.Interaction, payment_name: str, cooldown: int):
        user_id = interaction.user.id

        if not is_action_available(user_id, payment_name):
            remaining = get_remaining_time(user_id, payment_name)
            hours, remainder = divmod(remaining, 3600)
            mins, secs = divmod(remainder, 60)
            await interaction.response.send_message(
                f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ \"{payment_name}\" –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hours} —á {mins} –º–∏–Ω.",
                ephemeral=True
            )
            return

        last_used.setdefault(user_id, {})[payment_name] = time.time()
        save_timer_to_db(user_id, payment_name)

        pending_notifications.append({
            "user_id": user_id,
            "action_name": payment_name,
            "end_time": time.time() + cooldown
        })
        log_event("–û–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞", user_id, payment_name, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")

        await interaction.response.send_message(f"‚úÖ –í—ã –Ω–∞—á–∞–ª–∏: **{payment_name}**", ephemeral=True)

    @ui.button(label="–û–ø–ª–∞—Ç–∞ –Ω–∞ 6 –¥–Ω–µ–π", style=ButtonStyle.primary, emoji="üìÜ")
    async def pay_6(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_payment_click(interaction, "–û–ø–ª–∞—Ç–∞ –Ω–∞ 6 –¥–Ω–µ–π", 5 * 86400)  # 5 –¥–Ω–µ–π (–æ–ø–ª–∞—á–µ–Ω–æ –Ω–∞ 6)

    @ui.button(label="–û–ø–ª–∞—Ç–∞ –Ω–∞ 29 –¥–Ω–µ–π", style=ButtonStyle.success, emoji="üìÖ")
    async def pay_29(self, interaction: discord.Interaction, button: ui.Button):
        await self.handle_payment_click(interaction, "–û–ø–ª–∞—Ç–∞ –Ω–∞ 29 –¥–Ω–µ–π", 29 * 86400)

    @ui.button(label="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", style=ButtonStyle.secondary, emoji="‚¨ÖÔ∏è")
    async def back_to_farm(self, interaction: discord.Interaction, button: ui.Button):
        embed = discord.Embed(
            title="üåæ –§–∞—Ä–º GTA V RP",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞—Ä–º–∞:",
            color=discord.Color.green()
        )
        view = self.farm_view
        await interaction.response.edit_message(embed=embed, view=view)


# --- –ö–æ–º–∞–Ω–¥—ã ---
@tree.command(name="—Ñ–∞—Ä–º", description="–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∞—Ä–º–∞")
async def farm_command(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üåæ –§–∞—Ä–º GTA V RP",
        description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞—Ä–º–∞:",
        color=discord.Color.green()
    )
    view = FarmMenu()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=False)


@tree.command(name="—Ç–∞–π–º–µ—Ä—ã", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º")
async def show_timers(interaction: discord.Interaction):
    user_id = interaction.user.id

    if user_id not in last_used or not last_used[user_id]:
        await interaction.response.send_message("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.", ephemeral=True)
        return

    embed = discord.Embed(
        title="‚è±Ô∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã",
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ùå —Ä—è–¥–æ–º —Å –¥–µ–π—Å—Ç–≤–∏–µ–º, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –µ–≥–æ",
        color=discord.Color.orange()
    )

    view = TimerMenu(farm_view=FarmMenu())

    for action_name, timestamp in last_used[user_id].items():
        cooldown = get_cooldown(action_name)
        remaining = max(0, int(timestamp + cooldown - time.time()))
        if remaining > 0:
            hours, remainder = divmod(remaining, 3600)
            mins, secs = divmod(remainder, 60)
            timer_text = f"{hours} —á {mins} –º–∏–Ω {secs} —Å–µ–∫"
            embed.add_field(
                name=f"‚è≥ {action_name}",
                value=f"–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: `{timer_text}`",
                inline=False
            )
            view.add_delete_button(action_name)

    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ ---
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    await tree.sync()
    init_db()
    load_data_from_db()
    asyncio.create_task(check_notifications())


async def check_notifications():
    while True:
        current_time = time.time()
        to_remove = []

        for notify in pending_notifications:
            if notify["end_time"] <= current_time:
                user_id = notify["user_id"]
                action_name = notify["action_name"]

                try:
                    user = await bot.fetch_user(user_id)
                    msg_text = {
                        "–û–ø–ª–∞—Ç–∞ –Ω–∞ 29 –¥–Ω–µ–π": "üîî –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ 29 –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ä–∞ –ø—Ä–æ–¥–ª–∏—Ç—å!",
                        "–û–ø–ª–∞—Ç–∞ –Ω–∞ 6 –¥–Ω–µ–π": "üîî –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ 6 –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ä–∞ –ø—Ä–æ–¥–ª–∏—Ç—å!"
                    }.get(action_name, f"üîî –ó–∞–¥–∞–Ω–∏–µ \"{action_name}\" —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ!")

                    view = NotificationView(user_id, action_name)
                    message = await user.send(msg_text, view=view)
                    notify["message"] = message

                except Exception as e:
                    print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

                to_remove.append(notify)

        for item in to_remove:
            pending_notifications.remove(item)

        await asyncio.sleep(60)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_action_available(user_id, action_name):
    current_time = time.time()
    cooldown = get_cooldown(action_name)
    if user_id in last_used and action_name in last_used[user_id]:
        elapsed = current_time - last_used[user_id][action_name]
        return elapsed >= cooldown
    return True

def get_remaining_time(user_id, action_name):
    current_time = time.time()
    cooldown = get_cooldown(action_name)
    if user_id in last_used and action_name in last_used[user_id]:
        return max(0, int(cooldown - (current_time - last_used[user_id][action_name])))
    return 0

def get_cooldown(action_name):
    return custom_cooldowns.get(action_name, COOLDOWN_DEFAULT)


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---
class StartMenu(ui.View):
    def __init__(self, farm_view):
        super().__init__(timeout=None)
        self.farm_view = farm_view

    @ui.button(label="–û—Ç–∫—Ä—ã—Ç—å –§–∞—Ä–º", style=ButtonStyle.green)
    async def open_farm(self, interaction: discord.Interaction, button: ui.Button):
        embed = discord.Embed(
            title="üåæ –§–∞—Ä–º GTA V RP",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞—Ä–º–∞:",
            color=discord.Color.green()
        )
        view = self.farm_view
        await interaction.response.edit_message(embed=embed, view=view)


@bot.event
async def on_member_join(member: discord.Member):
    try:
        embed_dm = discord.Embed(
            title="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GTA V RP!",
            description="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–∞–π–º–µ—Ä–∞–º–∏.\n\nüîπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\nüîπ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å FiveM / RAGE.MP —Å–µ—Ä–≤–µ—Ä–∞–º–∏",
            color=discord.Color.green()
        )
        view = StartMenu(farm_view=FarmMenu())
        await member.send(embed=embed_dm, view=view)
    except discord.Forbidden:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name} ‚Äî –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ ---
@bot.event
async def on_message(message: discord.Message):
    if message.author == bot.user:
        return

    if message.content.lower() in ["–º–µ–Ω—é", "!—Ñ–∞—Ä–º"]:
        embed = discord.Embed(
            title="üåæ –§–∞—Ä–º GTA V RP",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞—Ä–º–∞:",
            color=discord.Color.green()
        )
        view = FarmMenu()
        await message.channel.send(embed=embed, view=view)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    bot.run("–¢–≤–æ–π_—Ç–æ–∫–µ–Ω")
else:
    # –î–ª—è Replit / Railway
    import os
    bot.run(os.getenv("DISCORD_TOKEN"))